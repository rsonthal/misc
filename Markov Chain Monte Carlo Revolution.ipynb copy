{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "generateBigramMatrix (generic function with 1 method)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function generateBigramMatrix(filename)\n",
    "    #Read the text file\n",
    "    text = lowercase(readstring(filename))\n",
    "    \n",
    "    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','*']\n",
    "    alphabet_size = 27\n",
    "    \n",
    "    #Dictionary for the frequency counts for pairs (x,y) (the keys) \n",
    "    #and the value being the frequency count\n",
    "    frequency_count = Dict()\n",
    "\n",
    "    #Loop through the whole text and update frequency count\n",
    "    for i = 2:length(text)\n",
    "        \n",
    "        #current character\n",
    "        x = text[i-1]\n",
    "        \n",
    "        if x < 'a' || x > 'z' \n",
    "            x = '*'\n",
    "        end\n",
    "        \n",
    "        #next character \n",
    "        y = text[i]\n",
    "        if y < 'a' || y > 'z' \n",
    "            y = '*'\n",
    "        end\n",
    "        \n",
    "        #Update frequency count table (or add key if not seen before)\n",
    "        if haskey(frequency_count, (x,y))\n",
    "            frequency_count[(x,y)] +=1\n",
    "        else\n",
    "            frequency_count[(x,y)] = 1\n",
    "        end\n",
    "            \n",
    "    end\n",
    "        \n",
    "    #Initiate the bigram matrix    \n",
    "    M = zeros(alphabet_size, alphabet_size)\n",
    "        \n",
    "    for i = 1:alphabet_size\n",
    "        row_total = 0\n",
    "        for j = 1:alphabet_size\n",
    "            x = alphabet[i]\n",
    "            y = alphabet[j]\n",
    "            #If the particular transition was seen the change the entry to non-zero\n",
    "            if haskey(frequency_count, (x,y))\n",
    "                M[i,j] = float(frequency_count[(x,y)])+1\n",
    "            else\n",
    "                M[i,j] = 1\n",
    "            end\n",
    "            row_total += M[i,j]\n",
    "        end\n",
    "        for j = 1:alphabet_size\n",
    "            M[i,j] = M[i,j]/float(row_total)\n",
    "        end\n",
    "        \n",
    "    end\n",
    "    return M\n",
    "    \n",
    "   \n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "generateBigramMatrix(\"/Users/rishi/text.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Method definition encryptText(Any) in module Main at In[9]:4 overwritten at In[13]:4.\n",
      "WARNING: Method definition calculatePlausaibility(Any, Any, Any) in module Main at In[9]:32 overwritten at In[13]:32.\n",
      "WARNING: Method definition calcBit(Any) in module Main at In[9]:41 overwritten at In[13]:41.\n",
      "WARNING: Method definition flipCoin(Any) in module Main at In[9]:49 overwritten at In[13]:49.\n",
      "WARNING: Method definition randomTransposition(Any, Any) in module Main at In[9]:65 overwritten at In[13]:65.\n",
      "WARNING: Method definition decryptText(Any, Any) in module Main at In[9]:80 overwritten at In[13]:80.\n",
      "WARNING: Method definition runMCM(Any, Any, Any) in module Main at In[9]:119 overwritten at In[13]:126.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "runMCM (generic function with 1 method)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using Combinatorics\n",
    "\n",
    "function encryptText(text)\n",
    "    input_text = lowercase(text)\n",
    "    f = randperm(27)\n",
    "    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','*']\n",
    "    \n",
    "    alph_to_numb = Dict{Char, Int64}()\n",
    "    for i = 1:length(alphabet)\n",
    "        alph_to_numb[alphabet[i]] = i\n",
    "    end\n",
    "    \n",
    "    output_text = Array{Char,1}(length(input_text))\n",
    "    \n",
    "    for i = 1:length(input_text)\n",
    "        x = input_text[i]\n",
    "        if x >= 'a' && x <= 'z'\n",
    "            output_text[i] = alphabet[f[alph_to_numb[x]]]\n",
    "        else\n",
    "            output_text[i] = alphabet[f[alph_to_numb['*']]]\n",
    "        end\n",
    "    end\n",
    "    \n",
    "    println(String(output_text))\n",
    "    return String(output_text)\n",
    "end\n",
    "\n",
    "#Note here that functions are represented as arrays\n",
    "#The text input is the not actual text but an array where the letter that was in the ith place\n",
    "#has been replaced by its corresponding number (Here think of the alphabet as being 1, . . ., m)\n",
    "function calculatePlausaibility(M,f,text)\n",
    "    pl = BigFloat(1)\n",
    "    for i = 1:(length(text)-1)\n",
    "        pl *= BigFloat(M[f[text[i]],f[text[i+1]]])\n",
    "    end\n",
    "    \n",
    "    return pl\n",
    "end\n",
    "\n",
    "function calcBit(p)\n",
    "    if 2*p >= 1\n",
    "        return 1\n",
    "    else\n",
    "        return 0\n",
    "    end\n",
    "end\n",
    "\n",
    "function flipCoin(p)\n",
    "    if p == 1\n",
    "        return 1\n",
    "    end\n",
    "    rand_bit = rand(1:2)-1\n",
    "    p_bit = calcBit(p)\n",
    "    while rand_bit != 1\n",
    "        rand_bit = rand(1:2)-1\n",
    "        p=(2*p)%1\n",
    "        p_bit = calcBit(p)\n",
    "    end\n",
    "    return p_bit\n",
    "end\n",
    "\n",
    "\n",
    "\n",
    "function randomTransposition(f,m)\n",
    "    i = rand(1:m)\n",
    "    j = rand(1:m)\n",
    "    while j == i\n",
    "        j = rand(1:m)\n",
    "    end\n",
    "    \n",
    "    temp = f[i]\n",
    "    f[i] = f[j]\n",
    "    f[j] = temp\n",
    "    \n",
    "    return f\n",
    "end\n",
    "\n",
    "function decryptText(input_text,filename)\n",
    "    \n",
    "    input_text = lowercase(input_text)\n",
    "    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','*']\n",
    "    \n",
    "    alph_to_numb = Dict{Char, Int64}()\n",
    "    for i = 1:length(alphabet)\n",
    "        alph_to_numb[alphabet[i]] = i\n",
    "    end\n",
    "\n",
    "    text = Array{Int64,1}(length(input_text))\n",
    "    for i = 1:length(text)\n",
    "        x = input_text[i]\n",
    "        if x >= 'a' && x <= 'z'\n",
    "            text[i] = alph_to_numb[input_text[i]]\n",
    "        else\n",
    "            text[i] = 27\n",
    "        end\n",
    "    end\n",
    "    \n",
    "    M = generateBigramMatrix(filename)   \n",
    "    \n",
    "    max_pl = 0\n",
    "    max_f = Array{Int64,1}(27)\n",
    "    for i = 1:10\n",
    "        (pl,f) = runMCM(alphabet,text,M)\n",
    "        println(\"Last attempt decryption\")\n",
    "        for i = 1:length(text)\n",
    "            print(alphabet[max_f[text[i]]])\n",
    "        end\n",
    "        \n",
    "        println()\n",
    "        println()\n",
    "        if pl > max_pl\n",
    "            max_pl = pl\n",
    "            max_f=f\n",
    "        end\n",
    "    end\n",
    "    \n",
    "    println(\"Best decryption:\")\n",
    "    println(max_pl)\n",
    "    for i = 1:length(text)\n",
    "        print(alphabet[max_f[text[i]]])\n",
    "    end\n",
    "        \n",
    "end\n",
    "   \n",
    "function runMCM(alphabet, text, M)\n",
    "    f = randperm(27)\n",
    "    println(f)\n",
    "    \n",
    "    pl = calculatePlausaibility(M,f,text)\n",
    "    \n",
    "    max_pl = pl\n",
    "    max_f = Array{Int64,1}(length(f))\n",
    "    \n",
    "    println(\"Starting trial\")\n",
    "    count = 0\n",
    "    while count < 2000\n",
    "        f_star = Array{Int64,1}(length(f))\n",
    "        for j = 1:length(f)\n",
    "            f_star[j] = f[j]\n",
    "        end\n",
    "        f_star = randomTransposition(f_star,27)\n",
    "        pl_star = calculatePlausaibility(M,f_star,text)\n",
    "        \n",
    "        if pl_star > pl\n",
    "            pl = pl_star\n",
    "            f = f_star\n",
    "            count += 1\n",
    "        elseif flipCoin(pl_star/pl) == 1\n",
    "            pl = pl_star\n",
    "            f = f_star\n",
    "            count += 1\n",
    "        end\n",
    "        \n",
    "        if pl > max_pl\n",
    "            max_pl = pl\n",
    "            for j = 1:length(f)\n",
    "                max_f[j] = f[j]\n",
    "            end\n",
    "        end\n",
    "    end\n",
    "    \n",
    "    println(\"finished\")\n",
    "    \n",
    "    return (max_pl, max_f)\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wcbqymwbbnqmicyqymfkymtmictuzmtmzubwmmmmmmctqmcbpqymtqmtumicymdtllfxymicbpxcmmmmmmcymwtllmubimqyymeymqibhhtuxmcykymmmmmibmwfijcmctqmwbbnqmatllmphmwticmqubwmmmmmmermltiilymcbkqymepqimictuzmtimopyykmmmmmibmqibhmwticbpimfmafkecbpqymuyfkmmmmmsyiwyyumicymwbbnqmfunmakbvyumlfzymmmmmicymnfkzyqimydyutuxmbamicymryfkmmmmmmcymxtdyqmctqmcfkuyqqmsyllqmfmqcfzymmmmmibmfqzmtamicykymtqmqbeymetqifzymmmmmmicymbulrmbicykmqbpunmqmicymqwyyhmmmmmbamyfqrmwtunmfunmnbwurmalfzymmmmmmicymwbbnqmfkymlbdylrmmnfkzmfunmnyyhmmmmmmspimtmcfdymhkbetqyqmibmzyyhmmmmmmfunmetlyqmibmxbmsyabkymtmqlyyhmmmmmmfunmetlyqmibmxbmsyabkymtmqlyyhm\n",
      "[10,14,13,27,18,9,21,20,4,12,6,2,15,1,5,26,25,3,7,8,17,16,11,24,19,22,23]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "*jtfnb*tthfbojnfnbulnbzbojzysbzbsyt*bbbbbbjzfbjtkfnbzfbzybojnbizmmudnbojtkdjbbbbbbjnb*zmmbytobfnnbwnbfotxxzydbjnlnbbbbbotb*uorjbjzfb*tthfbpzmmbkxb*zojbfyt*bbbbbbwabmzoomnbjtlfnbwkfobojzysbzobvknnlbbbbbotbfotxb*zojtkobubpulwjtkfnbynulbbbbbcno*nnybojnb*tthfbuyhbpltenybmusnbbbbbojnbhulsnfobninyzydbtpbojnbanulbbbbbbjnbdzinfbjzfbjulynffbcnmmfbubfjusnbbbbbotbufsbzpbojnlnbzfbftwnbwzfousnbbbbbbojnbtymabtojnlbftkyhbfbojnbf*nnxbbbbbtpbnufab*zyhbuyhbht*yabpmusnbbbbbbojnb*tthfbulnbmtinmabbhulsbuyhbhnnxbbbbbbckobzbjuinbxltwzfnfbotbsnnxbbbbbbuyhbwzmnfbotbdtbcnptlnbzbfmnnxbbbbbbuyhbwzmnfbotbdtbcnptlnbzbfmnnxb\n",
      "\n",
      "[24,13,18,8,10,21,19,20,9,14,11,12,3,15,23,7,16,22,2,26,6,27,4,17,25,5,1]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "wcote*wooht*ncete*are*i*ncisk*i*ksow******cit*coute*it*is*nce*villape*ncoupc******ce*will*son*tee*me*tnoddisp*cere*****no*wanxc*cit*wooht*fill*ud*winc*tsow******my*linnle*corte*mutn*ncisk*in*queer*****no*tnod*wincoun*a*farmcoute*sear*****benwees*nce*wooht*ash*froges*lake*****nce*harketn*evesisp*of*nce*year******ce*pivet*cit*carsett*bellt*a*tcake*****no*atk*if*ncere*it*tome*mitnake******nce*osly*oncer*toush*t*nce*tweed*****of*eaty*wish*ash*howsy*flake******nce*wooht*are*lovely**hark*ash*heed******bun*i*cave*dromitet*no*keed******ash*milet*no*po*before*i*tleed******ash*milet*no*po*before*i*tleed*\n",
      "\n",
      "[6,25,22,2,5,15,21,13,14,11,20,7,16,8,10,27,4,3,17,12,19,24,9,18,23,1,26]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woods*these*are*i*think*i*know******his*house*is*in*the*village*though******he*will*not*see*ce*stomming*here*****to*watzh*his*woods*fill*um*with*snow******cy*little*horse*cust*think*it*queer*****to*stom*without*a*farchouse*near*****between*the*woods*and*fropen*lake*****the*darkest*evening*of*the*year******he*gives*his*harness*bells*a*shake*****to*ask*if*there*is*soce*cistake******the*only*other*sound*s*the*sweem*****of*easy*wind*and*downy*flake******the*woods*are*lovely**dark*and*deem******but*i*have*mrocises*to*keem******and*ciles*to*go*before*i*sleem******and*ciles*to*go*before*i*sleem*\n",
      "\n",
      "[3,5,2,6,19,24,13,20,22,11,8,18,26,14,27,16,15,4,21,1,25,23,9,7,17,12,10]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*\n",
      "\n",
      "[15,19,22,2,20,8,25,11,23,9,24,21,13,27,7,4,17,1,14,3,26,16,12,5,6,18,10]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*\n",
      "\n",
      "[27,26,23,10,17,22,19,3,25,7,14,5,20,11,1,15,2,16,21,13,4,24,8,6,12,18,9]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*\n",
      "\n",
      "[14,5,24,4,2,17,8,9,22,16,15,26,12,18,21,23,3,25,1,13,20,19,6,27,11,10,7]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*\n",
      "\n",
      "[10,15,27,21,3,16,8,5,6,20,26,23,17,7,14,24,13,25,11,19,9,1,2,22,18,12,4]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*\n",
      "\n",
      "[17,11,7,8,24,27,9,25,19,6,23,2,18,20,14,16,1,3,5,21,15,22,13,10,12,26,4]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*\n",
      "\n",
      "[27,13,19,26,21,7,24,15,5,2,16,6,14,12,22,9,10,4,3,8,25,11,23,20,17,1,18]\n",
      "Starting trial\n",
      "finished\n",
      "Last attempt decryption\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*\n",
      "\n",
      "Best decryption:\n",
      "3.26670069816266167409624931848150078858095379067160567907824918214949165890712e-595\n",
      "whose*woogs*these*are*i*think*i*know******his*house*is*in*the*villace*thouch******he*will*not*see*pe*stoddinc*here*****to*watzh*his*woogs*fill*ud*with*snow******py*little*horse*pust*think*it*queer*****to*stod*without*a*farphouse*near*****between*the*woogs*ang*fromen*lake*****the*garkest*eveninc*of*the*year******he*cives*his*harness*bells*a*shake*****to*ask*if*there*is*sope*pistake******the*only*other*soung*s*the*sweed*****of*easy*wing*ang*gowny*flake******the*woogs*are*lovely**gark*ang*geed******but*i*have*dropises*to*keed******ang*piles*to*co*before*i*sleed******ang*piles*to*co*before*i*sleed*"
     ]
    }
   ],
   "source": [
    "e_text = encryptText(\"Whose woods these are I think I know.\n",
    "    His house is in the village though;\n",
    "    He will not see me stopping here\n",
    "    To watch his woods fill up with snow.\n",
    "    My little horse must think it queer\n",
    "    To stop without a farmhouse near\n",
    "    Between the woods and frozen lake\n",
    "    The darkest evening of the year.\n",
    "    He gives his harness bells a shake\n",
    "    To ask if there is some mistake.\n",
    "    The only other sound's the sweep\n",
    "    Of easy wind and downy flake.\n",
    "    The woods are lovely, dark and deep,\n",
    "    But I have promises to keep,\n",
    "    And miles to go before I sleep,\n",
    "    And miles to go before I sleep.\")\n",
    "\n",
    "decryptText(e_text,\"/Users/rishi/Downloads/english.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "function \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 0.5.1",
   "language": "julia",
   "name": "julia-0.5"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "0.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
